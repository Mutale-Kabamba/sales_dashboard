# -*- coding: utf-8 -*-
"""Copy of EDA Practice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oXu3DNd2Njt0RiwA9Ku9XLzFKhJ2JXdv

#**Load the Dataset and Check Its Structure**

**Load the Excel file into Python**
"""

# Importing Libraries
import pandas as pd

# Load dataset
sales = pd.read_excel("sales_data.xlsx")

sales.head()

"""**Check for missing values**"""

print(sales.isnull().sum())

"""**Basic Statistics**"""

print(sales.describe())

"""**Observations from the Data:**

* **Missing Values:** There are no missing values in the dataset.

* **Customer Count:**

    * The minimum number of customers on a given day: **51**

    * The maximum number of customers: **299**

    * The average daily customers: **170**


* **Marketing Spend:**

    * Ranges from **ZMW 1,064** to **ZMW 9,996** per day.

    * The average spend is **ZMW 5,865.**

* **Total Sales:**

    * The minimum daily sales recorded: **ZMW 2,351.79**

    * The maximum daily sales recorded: **ZMW 17,657.40**

    * The average daily sales: **ZMW 7,858.57**

#**Sales Trend Over Time**
"""

import matplotlib.pyplot as plt

# Convert date column to datetime format
sales["Purchase_Date"] = pd.to_datetime(sales["Purchase_Date"])

# Plot sales trend
plt.figure(figsize=(12, 6))
plt.plot(sales["Purchase_Date"], sales["Total_Sales"], marker="o", linestyle="-", color="b")
plt.xlabel("Date")
plt.ylabel("Total Sales (ZMW)")
plt.title("Sales Trend Over Time")
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

"""**Observations from the Sales Trend:**

1. **Fluctuating Sales:** Sales are not consistent; they rise and fall over time.

2. **Spikes in Sales:** There are some noticeable peaks where sales suddenly increase.

3. **Possible Seasonality:** Some trends may indicate repeating patterns (e.g., high sales after specific intervals).

4. **Downward & Upward Trends:** Some periods show increasing sales, while others drop.

#**Analyzing the Impact of Marketing Spend and Customer Count on Sales**

**Correlation Analysis**


Checking how strongly Marketing Spend and Customer Count impact Total Sales.
"""

# Compute correlation matrix
correlation_matrix = sales[["Customer_Count", "Marketing_Spend", "Total_Sales"]].corr()
print(correlation_matrix)

"""**Visualizing Relationship: Marketing Spend vs Total Sales**"""

import seaborn as sns

# Scatter plot: Marketing Spend vs. Total Sales
plt.figure(figsize=(6,4))
sns.scatterplot(x=sales["Marketing_Spend"], y=sales["Total_Sales"], color="blue")
plt.xlabel("Marketing Spend (ZMW)")
plt.ylabel("Total Sales (ZMW)")
plt.title("Marketing Spend vs Total Sales")
plt.show()

"""**Observations from the Scatter Plot (Marketing Spend vs. Total Sales)**

1. Positive Trend (but Weak):

  * As Marketing Spend increases, Total Sales also tend to increase.
However, the relationship is not very strongâ€”thereâ€™s a lot of scatter.

2. High Variability:

  * Even with low Marketing Spend, some days have high sales, meaning other factors influence sales beyond just marketing.

3. Potential Outliers:

  * Some points show high sales despite low marketing spend, suggesting factors like seasonality, promotions, or repeat customers.

**Check the correlation value to confirm how strong the relationship is.**
"""

sales[["Marketing_Spend", "Total_Sales"]].corr()

"""**Visualizing Relationship: Customer Count vs Total Sales**"""

# Scatter plot: Customer Count vs. Total Sales
plt.figure(figsize=(6,4))
sns.scatterplot(x=sales["Customer_Count"], y=sales["Total_Sales"], color="green")
plt.xlabel("Customer Count")
plt.ylabel("Total Sales (ZMW)")
plt.title("Customer Count vs Total Sales")
plt.show()

"""**Observations from the Scatter Plot (Customer Count vs. Total Sales)**

1. **Strong Positive Relationship:**

 * As Customer Count increases, Total Sales also increase significantly.
The points form an upward trend, meaning more customers lead to higher sales.

2. **Less Variability Compared to Marketing Spend:**

 * Unlike the Marketing Spend plot, this scatter plot shows less randomness.
This suggests that Customer Count is a stronger predictor of Total Sales than Marketing Spend.

3. **Some Variation Exists:**

 * While the trend is clear, some days have lower sales despite a high customer count.
This could mean some customers buy less than others, or discounts/promotions influence spending.

**Check the correlation value to confirm how strong the relationship is.**
"""

sales[["Customer_Count", "Total_Sales"]].corr()

"""**Key Takeaways:**

* Customer Count is a better predictor of Total Sales than Marketing Spend.

* Marketing Spend still has an impact, but it's not as strong as the number of customers.

#**Building a Predictive Model for Sales**

**Import Libraries & Prepare Data**
"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, r2_score

# Define features (X) and target variable (y)
X = sales[["Marketing_Spend", "Customer_Count"]]
y = sales["Total_Sales"]

# Split into training (80%) and testing (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize Linear Regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

"""**Check Model Performance**"""

# Predict on test data
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error: {mae}")
print(f"R-squared Score: {r2}")

"""**Predict Future Sales**"""

# Example: Predict sales for Marketing Spend = 5000 ZMW & Customer Count = 200
new_data = [[5000, 200]]
predicted_sales = model.predict(new_data)

print(f"Predicted Sales: {predicted_sales[0]:.2f} ZMW")

feature_importance = model.coef_
print(f"Marketing Spend Coefficient: {feature_importance[0]}")
print(f"Customer Count Coefficient: {feature_importance[1]}")

import matplotlib.pyplot as plt

plt.scatter(y_test, y_pred, color="blue")
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Actual vs Predicted Sales")
plt.show()

print(model.predict([[3000, 150]]))  # Lower marketing, moderate customers
print(model.predict([[7000, 250]]))  # Higher marketing & customer count
print(model.predict([[5000, 300]]))  # More customers, same marketing

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

# Load your dataset
sales = pd.read_excel("sales_data.xlsx")
# Train Model
X = sales[["Marketing_Spend", "Customer_Count"]]
y = sales["Total_Sales"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

# Streamlit Dashboard
st.title("ðŸ“Š Sales Prediction Dashboard")
st.sidebar.header("ðŸ“Œ Input Marketing & Customer Data")

# User Inputs
marketing_spend = st.sidebar.number_input("Enter Marketing Spend (ZMW)", min_value=0, value=5000)
customer_count = st.sidebar.number_input("Enter Customer Count", min_value=0, value=200)

# Predict Sales
predicted_sales = model.predict([[marketing_spend, customer_count]])[0]
st.metric(label="ðŸ’° Predicted Sales (ZMW)", value=f"{predicted_sales:.2f}")

# Scatter Plot (Customer Count vs. Sales)
st.subheader("Customer Count vs. Total Sales")
fig, ax = plt.subplots()
ax.scatter(sales["Customer_Count"], sales["Total_Sales"], color="blue", alpha=0.6, label="Actual Data")
ax.set_xlabel("Customer Count")
ax.set_ylabel("Total Sales")
ax.set_title("Customer Count vs. Total Sales")
st.pyplot(fig)

st.write("ðŸ“¢ **Observation:** Higher customer count leads to higher sales!")

# Run Streamlit app (run this in terminal after saving the file)
# streamlit run sales_dashboard.py

